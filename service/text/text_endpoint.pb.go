// Code generated by protoc-gen-go.
// source: text_endpoint.proto
// DO NOT EDIT!

/*
Package text is a generated protocol buffer package.

It is generated from these files:
	text_endpoint.proto

It has these top-level messages:
	StreamTextRequest
	StreamTextResponse
	StreamTextResponseData
*/
package text

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StreamTextRequest struct {
	Echo      bool   `protobuf:"varint,1,opt,name=Echo,json=echo" json:"Echo,omitempty"`
	Input     string `protobuf:"bytes,2,opt,name=Input,json=input" json:"Input,omitempty"`
	SessionID string `protobuf:"bytes,3,opt,name=SessionID,json=sessionID" json:"SessionID,omitempty"`
}

func (m *StreamTextRequest) Reset()                    { *m = StreamTextRequest{} }
func (m *StreamTextRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamTextRequest) ProtoMessage()               {}
func (*StreamTextRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StreamTextRequest) GetEcho() bool {
	if m != nil {
		return m.Echo
	}
	return false
}

func (m *StreamTextRequest) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *StreamTextRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type StreamTextResponse struct {
	Code string                  `protobuf:"bytes,1,opt,name=Code,json=code" json:"Code,omitempty"`
	Data *StreamTextResponseData `protobuf:"bytes,2,opt,name=Data,json=data" json:"Data,omitempty"`
	Text string                  `protobuf:"bytes,3,opt,name=Text,json=text" json:"Text,omitempty"`
}

func (m *StreamTextResponse) Reset()                    { *m = StreamTextResponse{} }
func (m *StreamTextResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamTextResponse) ProtoMessage()               {}
func (*StreamTextResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StreamTextResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *StreamTextResponse) GetData() *StreamTextResponseData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *StreamTextResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type StreamTextResponseData struct {
	Output string `protobuf:"bytes,1,opt,name=Output,json=output" json:"Output,omitempty"`
}

func (m *StreamTextResponseData) Reset()                    { *m = StreamTextResponseData{} }
func (m *StreamTextResponseData) String() string            { return proto.CompactTextString(m) }
func (*StreamTextResponseData) ProtoMessage()               {}
func (*StreamTextResponseData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StreamTextResponseData) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func init() {
	proto.RegisterType((*StreamTextRequest)(nil), "StreamTextRequest")
	proto.RegisterType((*StreamTextResponse)(nil), "StreamTextResponse")
	proto.RegisterType((*StreamTextResponseData)(nil), "StreamTextResponseData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TextEndpoint service

type TextEndpointClient interface {
	StreamText(ctx context.Context, opts ...grpc.CallOption) (TextEndpoint_StreamTextClient, error)
}

type textEndpointClient struct {
	cc *grpc.ClientConn
}

func NewTextEndpointClient(cc *grpc.ClientConn) TextEndpointClient {
	return &textEndpointClient{cc}
}

func (c *textEndpointClient) StreamText(ctx context.Context, opts ...grpc.CallOption) (TextEndpoint_StreamTextClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TextEndpoint_serviceDesc.Streams[0], c.cc, "/TextEndpoint/StreamText", opts...)
	if err != nil {
		return nil, err
	}
	x := &textEndpointStreamTextClient{stream}
	return x, nil
}

type TextEndpoint_StreamTextClient interface {
	Send(*StreamTextRequest) error
	Recv() (*StreamTextResponse, error)
	grpc.ClientStream
}

type textEndpointStreamTextClient struct {
	grpc.ClientStream
}

func (x *textEndpointStreamTextClient) Send(m *StreamTextRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *textEndpointStreamTextClient) Recv() (*StreamTextResponse, error) {
	m := new(StreamTextResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TextEndpoint service

type TextEndpointServer interface {
	StreamText(TextEndpoint_StreamTextServer) error
}

func RegisterTextEndpointServer(s *grpc.Server, srv TextEndpointServer) {
	s.RegisterService(&_TextEndpoint_serviceDesc, srv)
}

func _TextEndpoint_StreamText_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TextEndpointServer).StreamText(&textEndpointStreamTextServer{stream})
}

type TextEndpoint_StreamTextServer interface {
	Send(*StreamTextResponse) error
	Recv() (*StreamTextRequest, error)
	grpc.ServerStream
}

type textEndpointStreamTextServer struct {
	grpc.ServerStream
}

func (x *textEndpointStreamTextServer) Send(m *StreamTextResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *textEndpointStreamTextServer) Recv() (*StreamTextRequest, error) {
	m := new(StreamTextRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TextEndpoint_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TextEndpoint",
	HandlerType: (*TextEndpointServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamText",
			Handler:       _TextEndpoint_StreamText_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "text_endpoint.proto",
}

func init() { proto.RegisterFile("text_endpoint.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0x31, 0x4b, 0x03, 0x41,
	0x10, 0x85, 0x5d, 0xdd, 0x1c, 0xde, 0x68, 0xe3, 0x44, 0xe2, 0x21, 0x16, 0xe1, 0xaa, 0x03, 0xe1,
	0x08, 0xb1, 0xb4, 0x34, 0x29, 0x82, 0x85, 0xb0, 0xb1, 0xb3, 0x90, 0xf5, 0x6e, 0x20, 0x57, 0xb8,
	0x73, 0x66, 0xe7, 0x20, 0x3f, 0x5f, 0x66, 0x8d, 0x28, 0x24, 0xe5, 0xec, 0xdb, 0xf9, 0xde, 0x9b,
	0x07, 0x63, 0xa1, 0x9d, 0xbc, 0x53, 0x68, 0x7b, 0xee, 0x82, 0xd4, 0xfd, 0x96, 0x85, 0xcb, 0x37,
	0xb8, 0x5a, 0xcb, 0x96, 0xfc, 0xe7, 0x2b, 0xed, 0xc4, 0xd1, 0xd7, 0x40, 0x51, 0x10, 0xc1, 0x2e,
	0x9b, 0x0d, 0x17, 0x66, 0x6a, 0xaa, 0x73, 0x67, 0xa9, 0xd9, 0x30, 0x5e, 0xc3, 0x68, 0x15, 0xfa,
	0x41, 0x8a, 0xd3, 0xa9, 0xa9, 0x72, 0x37, 0xea, 0x74, 0xc0, 0x3b, 0xc8, 0xd7, 0x14, 0x63, 0xc7,
	0x61, 0xb5, 0x28, 0xce, 0x92, 0x92, 0xc7, 0xdf, 0x87, 0xb2, 0x03, 0xfc, 0x0f, 0x8f, 0x3d, 0x87,
	0x48, 0x4a, 0x7f, 0xe2, 0x96, 0x12, 0x3d, 0x77, 0xb6, 0xe1, 0x96, 0xf0, 0x1e, 0xec, 0xc2, 0x8b,
	0x4f, 0xf0, 0x8b, 0xf9, 0x4d, 0x7d, 0xb8, 0xa6, 0xb2, 0xb3, 0xad, 0x17, 0xaf, 0x00, 0x55, 0xf6,
	0x7e, 0x56, 0xcf, 0x2a, 0x67, 0x30, 0x39, 0xbe, 0x83, 0x13, 0xc8, 0x5e, 0x06, 0xd1, 0xe4, 0x3f,
	0x86, 0x19, 0xa7, 0x69, 0xfe, 0x0c, 0x97, 0xfa, 0x77, 0xb9, 0xef, 0x03, 0x1f, 0x01, 0xfe, 0x08,
	0x88, 0xf5, 0x41, 0x2d, 0xb7, 0xe3, 0x23, 0xb1, 0xca, 0x93, 0xca, 0xcc, 0xcc, 0x47, 0x96, 0xda,
	0x7c, 0xf8, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x98, 0xfc, 0x96, 0xcb, 0x64, 0x01, 0x00, 0x00,
}
